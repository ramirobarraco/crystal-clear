#lang racket
(require redex
         "../grammar.rkt"
         )

(define-extended-language crystal-lang+Γ crystal-lang
  [Γ (Name ...)])

(define-judgment-form
  crystal-lang
  #:mode (WF I I I)
  #:contract (WF Γ σ P)
  
  [--------------------------------
   (WF Γ σ nil)]

  [--------------------------------
   (WF Γ σ bool)]

  [--------------------------------
   (WF Γ σ int32)]

  [--------------------------------
   (WF Γ σ str)]
  
  [--------------------------------
   (WF Γ σ union)]

   [(WF Γ σ P_1)
   (WF Γ σ P_2)
   (WF Γ σ P_3)
   -----------------------------
   (WF Γ σ (if P_1 then P_2 else P_3))]

  [(WF Γ σ var)
   (WF Γ σ P)
   -----------------------------
   (WF Γ σ (var = P))]

  [(WF Γ σ P_1)
   (WF Γ σ P_2)
   (WF Γ σ P_3)
   ...
   -----------------------------
   (WF Γ σ (P_1 P_2 P_3 ...) )]

  [(WF Γ σ P_1)
   (WF Γ σ P_2)
   -----------------------------
   (WF Γ σ (while P_1 P_2))]

  [(WF Γ σ P_1)
   (WF Γ σ P_2)
   -----------------------------
   (WF Γ σ (P_1 binop P_2))]

  [(WF Γ σ P_1)
   -----------------------------
   (WF Γ σ (unop P_1))]

  [
   -----------------------------
   (WF Γ σ r)]
  
  [(WF Γ σ P_1)
   (WF Γ σ P_2)
   -----------------------------
   (WF Γ σ (let x = P_1 in P_2))]

  [
   -----------------------------
   (WF Γ σ Name)]
  
  
  )